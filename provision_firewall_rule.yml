---
- name: Provision Firewall Rule
  hosts: "{{ firewalls | join(',') }}" # Dynamically target firewalls passed from Flask app
  gather_facts: no
  connection: network_cli # Default for Cisco, adjust for FortiGate/Palo Alto if needed per task
  collections:
    - cisco.ios
    - fortinet.fortios
    - paloaltonetworks.panos
  any_errors_fatal: true # IMPORTANT: This will cause the playbook to fail immediately if any task fails.

  vars:
    rule_id: "{{ rule_id }}"
    source_ip: "{{ source_ip }}"
    destination_ip: "{{ destination_ip }}"
    protocol: "{{ protocol }}"
    dest_port: "{{ dest_port }}" # Use dest_port consistently
    rule_description: "{{ rule_description }}"

    # Define object names based on rule parameters for consistency
    src_addr_name: "h-{{ source_ip }}" # Use h-x.x.x.x format
    dst_addr_name: "h-{{ destination_ip }}" # Use h-x.x.x.x format

    # Define Palo Alto service name based on protocol and dest_port
    # Handles 'any', 'icmp', or specific protocol-dest_port combinations
    # Ensured this is a single line to prevent any whitespace issues from multi-line YAML
    pa_service_name: "{{ 'any' if protocol | lower == 'any' else ('ICMP' if protocol | lower == 'icmp' else (protocol | upper) + '-' + (dest_port | string)) }}"

    # Define Palo Alto protocol for service object (needs to be name, not number)
    # Ensure it's strictly 'tcp', 'udp', or 'icmp' for the module
    # Added | trim to ensure no trailing spaces, and ensured it's on a single line
    pa_protocol_for_service_object: "{{ protocol | lower | trim if protocol | string not in ['6', '17', '1'] else ({'6':'tcp', '17':'udp', '1':'icmp'}[protocol | string]) }}"

  tasks:
    - name: Debug Ansible variables (for testing)
      debug:
        msg: "Provisioning Rule ID: {{ rule_id }}, Source: {{ source_ip }}, Dest: {{ destination_ip }}, Proto: {{ protocol }}, Port: {{ dest_port }}, Firewalls: {{ firewalls }}"

    # --- FortiGate Object Creation (Address & Service) ---
    - name: Create FortiGate Source Address Object
      fortinet.fortios.fortios_firewall_address:
        vdom: "root"
        state: present
        name: "HOST_{{ source_ip | replace('.', '_') }}"
        type: ipmask
        subnet: "{{ source_ip }}/32" # Assuming /32 for host, adjust if source_ip can be a network
      when: inventory_hostname in groups['fortinet'] | default([])
      ignore_errors: yes # Keep ignore_errors for FortiGate if Palo Alto is the primary target

    - name: Create FortiGate Destination Address Object
      fortinet.fortios.fortios_firewall_address:
        vdom: "root"
        state: present
        name: "HOST_{{ destination_ip | replace('.', '_') }}"
        type: ipmask
        subnet: "{{ destination_ip }}/32" # Assuming /32 for host
      when: inventory_hostname in groups['fortinet'] | default([])
      ignore_errors: yes # Keep ignore_errors for FortiGate if Palo Alto is the primary target

    - name: Create FortiGate Service Object (TCP/UDP)
      fortinet.fortios.fortios_firewall_service_custom:
        vdom: "root"
        state: present
        name: "SVC_{{ protocol | upper }}_{{ dest_port }}"
        protocol: "{{ protocol | lower }}"
        tcp_portrange: "{{ dest_port }}" # Use dest_port
      when:
        - inventory_hostname in groups['fortinet'] | default([])
        - protocol != 'icmp' # FortiGate service for ICMP is different
        - protocol != 'any'
      ignore_errors: yes # Keep ignore_errors for FortiGate if Palo Alto is the primary target

    - name: Create FortiGate ICMP Service Object
      fortinet.fortios.fortios_firewall_service_custom:
        vdom: "root"
        state: present
        name: "SVC_ICMP"
        protocol: icmp
      when:
        - inventory_hostname in groups['fortinet'] | default([])
        - protocol == 'icmp'
      ignore_errors: yes # Keep ignore_errors for FortiGate if Palo Alto is the primary target

    - name: Set FortiGate Service to 'ALL' if protocol is 'any'
      set_fact:
        fortigate_service_name: "ALL"
      when:
        - inventory_hostname in groups['fortinet'] | default([])
        - protocol == 'any'

    - name: Set FortiGate Service to Custom Service if not 'any'
      set_fact:
        fortigate_service_name: "SVC_{{ protocol | upper }}_{{ dest_port }}" # Use dest_port
      when:
        - inventory_hostname in groups['fortinet'] | default([])
        - protocol | lower != 'any' and protocol | lower in ['tcp', 'udp']

    - name: Set FortiGate Service to ICMP Service if protocol is 'icmp'
      set_fact:
        fortigate_service_name: "SVC_ICMP"
      when:
        - inventory_hostname in groups['fortinet'] | default([])
        - protocol | lower == 'icmp'

    # --- Firewall Policy/Rule Creation ---

    # Example: Task for FortiGate Firewall Policy
    - name: Create FortiGate Firewall Policy
      fortinet.fortios.fortios_firewall_policy:
        vdom: "root" # Adjust vdom if necessary
        state: present
        policyid: "{{ rule_id }}" # Use rule_id as policy ID
        name: "RULE-{{ rule_id }}-{{ protocol }}-{{ dest_port }}" # Use dest_port
        srcintf:
          - name: "port1" # Example: adjust source interface name
        dstintf:
          - name: "port2" # Example: adjust destination interface name
        srcaddr:
          - name: "HOST_{{ source_ip | replace('.', '_') }}" # Use created address object
        dstaddr:
          - name: "HOST_{{ destination_ip | replace('.', '_') }}" # Use created address object
        service:
          - name: "{{ fortigate_service_name }}" # Use created service object or 'ALL'
        action: accept
        schedule: always
        logtraffic: all
      when: inventory_hostname in groups['fortinet'] | default([]) # Ensure group exists
      ignore_errors: yes # Keep ignore_errors for FortiGate if Palo Alto is the primary target

    # --- Palo Alto Object Creation (Address & Service) ---
    - name: Create Palo Alto Source Address Object
      paloaltonetworks.panos.panos_address_object:
        provider:
          ip_address: "{{ ansible_host }}"
          username: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          api_key: "{{ ansible_api_key | default(omit) }}"
        name: "{{ src_addr_name }}"
        address_type: "ip-netmask"
        value: "{{ source_ip }}" # Corrected: Removed /32, supply only IP for host
        state: present
      when: inventory_hostname in groups['paloalto'] | default([])
      # NO ignore_errors: yes HERE. This task MUST succeed.

    - name: Create Palo Alto Destination Address Object
      paloaltonetworks.panos.panos_address_object:
        provider:
          ip_address: "{{ ansible_host }}"
          username: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          api_key: "{{ ansible_api_key | default(omit) }}"
        name: "{{ dst_addr_name }}"
        address_type: "ip-netmask"
        value: "{{ destination_ip }}" # Corrected: Removed /32, supply only IP for host
        state: present
      when: inventory_hostname in groups['paloalto'] | default([])
      # NO ignore_errors: yes HERE. This task MUST succeed.

    - name: Create Palo Alto Service Object
      paloaltonetworks.panos.panos_service_object:
        provider:
          ip_address: "{{ ansible_host }}"
          username: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          api_key: "{{ ansible_api_key | default(omit) }}"
        name: "{{ pa_service_name }}" # Use the dynamically generated service name
        protocol: "{{ pa_protocol_for_service_object }}" # Use the mapped protocol name (tcp, udp, icmp)
        destination_port: "{{ dest_port }}" # Use dest_port
        state: present
      when:
        - inventory_hostname in groups['paloalto'] | default([])
        - protocol | lower != 'any' # Only create specific service if not 'any'
      # NO ignore_errors: yes HERE. This task MUST succeed.

    - name: Create Palo Alto Security Rule
      paloaltonetworks.panos.panos_security_rule:
        provider:
          ip_address: "{{ ansible_host }}"
          username: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          api_key: "{{ ansible_api_key | default(omit) }}" # Use API key if available
        rule_name: "firework-{{ rule_id }}"
        description: "{{ rule_description }}"
        source_zone: ["any"]
        destination_zone: ["any"]
        source_ip: "{{ source_ip }}"
        destination_ip: "{{ destination_ip }}"
        application: ["any"]
        service: "{{ pa_service_name }}"
        action: allow
        log_start: true
        log_end: true
      when: inventory_hostname in groups['paloalto'] | default([]) # Ensure group exists
      # NO ignore_errors: yes HERE. This task MUST succeed.

    - name: Commit changes on Palo Alto (if applicable)
      paloaltonetworks.panos.panos_commit_firewall: # Updated to use specific commit module
        provider:
          ip_address: "{{ ansible_host }}"
          username: "{{ ansible_user }}"
          password: "{{ ansible_password }}"
          api_key: "{{ ansible_api_key | default(omit) }}"
      when: inventory_hostname in groups['paloalto'] | default([])
      ignore_errors: yes # Keep ignore_errors for commit as it might fail if no changes were made due to earlier failures
