---
- name: FortiGate Pre-Check for Existing Firewall Policy
  hosts: "{{ firewall_name }}" # Target a single firewall
  gather_facts: no
  connection: httpapi # Use httpapi for FortiGate
  collections:
    - fortinet.fortios

  vars:
    check_source_ip: "{{ source_ip }}"
    check_destination_ip: "{{ destination_ip }}"
    check_protocol: "{{ protocol }}"
    check_port: "{{ port }}" # [WARNING]: Consider renaming 'port' to avoid conflicts with Ansible reserved names (e.g., 'service_port')

    # IMPORTANT: FortiGate API access token should be managed securely, e.g., via Ansible Vault
    # For demonstration purposes, it's a variable here, but DO NOT hardcode sensitive tokens in production.
    #fortigate_api_access_token: "h4GHn5Qy9Ghyr03cHcN5jk0gG05GGz"

    # Flag to indicate if a policy is found
    policy_found_flag: false

  tasks:
    - name: Debug FortiGate Pre-Check variables
      debug:
        msg: "Pre-checking for existing policy on {{ inventory_hostname }} (FortiGate) for Source: {{ check_source_ip }}, Dest: {{ check_destination_ip }}, Proto: {{ check_protocol }}, Port: {{ check_port }}"

    - name: Perform FortiGate Policy Lookup via API
      ansible.builtin.uri:
        # Construct the URL with dynamic variables, hardcoded srcintf, and using ansible_host for the IP
        url: "https://{{ ansible_host }}/api/v2/monitor/firewall/policy-lookup/?access_token={{ fortinet_api_access_token }}&srcintf=port3&sourceip={{ check_source_ip }}&protocol={{ check_protocol }}&dest={{ check_destination_ip }}&destport={{ check_port }}"
        method: GET
        validate_certs: no # Set to 'yes' and provide 'ca_path' or 'src' for production environments
        return_content: yes
      register: fgt_policy_lookup_result
      ignore_errors: yes # Allow the playbook to continue even if the API call encounters an error

    - name: Set policy_found_flag based on API lookup result
      set_fact:
        policy_found_flag: true
      # This 'when' condition is a basic assumption.
      # You MUST inspect the actual JSON response from the FortiGate policy-lookup API (e.g., by debugging fgt_policy_lookup_result.json)
      # to determine the precise condition that indicates a policy match.
      # Example: if the API returns a 'policyid' or a specific status when a policy is found.
      when: fgt_policy_lookup_result.status == 200 and fgt_policy_lookup_result.json.results.match | default(false) == true
      run_once: true
      delegate_to: localhost # Run this locally to update the flag once

    - name: Indicate if policy was found (FortiGate)
      debug:
        msg: "POLICY_EXISTS"
      when: policy_found_flag
      run_once: true
      delegate_to: localhost # Run this locally to ensure message is printed once for the run
