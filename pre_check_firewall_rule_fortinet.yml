---
- name: Pre-Check for Existing Firewall Policy on FortiGate
  hosts: all # This playbook will be delegated to specific FortiGate hosts
  gather_facts: no
  connection: network_cli
  collections:
    - fortinet.fortios

  vars:
    check_source_ip: "{{ source_ip }}"
    check_destination_ip: "{{ destination_ip }}"
    check_protocol: "{{ protocol }}"
    check_port: "{{ port }}" # 'port' is the input from Flask

    # Define FortiGate Address Object names based on IP type (/32 or network)
    # Example: 10.0.1.1 -> h-10-0-1-1
    # Example: 10.0.0.0/24 -> n-10-0-0/24
    check_src_addr_name: >-
      {% set _src_ip_parts = check_source_ip.split('/') %}
      {% if _src_ip_parts | length == 2 %}
        n-{{ _src_ip_parts[0] | replace('.', '-') }}/{{ _src_ip_parts[1] }}
      {% else %}
        h-{{ check_source_ip | replace('.', '-') }}
      {% endif %}

    check_dst_addr_name: >-
      {% set _dst_ip_parts = check_destination_ip.split('/') %}
      {% if _dst_ip_parts | length == 2 %}
        n-{{ _dst_ip_parts[0] | replace('.', '-') }}/{{ _dst_ip_parts[1] }}
      {% else %}
        h-{{ check_destination_ip | replace('.', '-') }}
      {% endif %}

    # Define FortiGate Service Object names based on protocol/port
    # Example: tcp/443 -> TCP-443
    # Example: icmp -> ICMP
    # Example: any -> ALL
    check_service_object_name: >-
      {% if check_protocol | lower == 'any' %}
        ALL
      {% elif check_protocol | lower == 'icmp' %}
        ICMP
      {% else %}
        {{ check_protocol | upper }}-{{ check_port }}
      {% endif %}

  tasks:
    - name: Debug Pre-Check variables for FortiGate
      debug:
        msg: "Pre-checking for existing policy on {{ inventory_hostname }} for Source: {{ check_source_ip }} ({{ check_src_addr_name }}), Dest: {{ check_destination_ip }} ({{ check_dst_addr_name }}), Proto: {{ check_protocol }}, Port: {{ check_port }} ({{ check_service_object_name }})"
      delegate_to: "{{ inventory_hostname }}"

    - name: Get FortiGate Firewall Policies for Pre-Check
      fortinet.fortios.fortios_monitor_fact:
        selector: 'system_policy'
        vdom: 'root'
      register: fgt_policies_pre_check
      delegate_to: "{{ inventory_hostname }}"
      ignore_errors: yes

    - name: Debug FortiGate policies retrieved (full output for pre-check)
      debug:
        var: fgt_policies_pre_check
      delegate_to: "{{ inventory_hostname }}"
      when: fgt_policies_pre_check is defined

    - name: Check FortiGate policies for match and set flag
      set_fact:
        policy_found_flag: true
      loop: "{{ fgt_policies_pre_check.meta.results | default([]) }}"
      loop_control:
        label: "Checking FortiGate policy {{ item.name }}"
      when:
        - item.srcaddr is defined and (item.srcaddr | map(attribute='name') | list | contains(check_src_addr_name))
        - item.dstaddr is defined and (item.dstaddr | map(attribute='name') | list | contains(check_dst_addr_name))
        - item.service is defined and (item.service | map(attribute='name') | list | contains(check_service_object_name))
      delegate_to: localhost # Set this fact on the Ansible controller

    - name: Indicate if policy was found on FortiGate
      debug:
        msg: "POLICY_EXISTS_FORTINET"
      when: policy_found_flag
      delegate_to: localhost # Print this message on the Ansible controller
